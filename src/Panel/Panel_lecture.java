/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panel;

import Class.Lecture;
import Class.Lecturer;
import Class.Subjects;
import HELRER.Comp;
import HELRER.Functions;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Panel_lecture extends javax.swing.JPanel {

    /**
     * Creates new form Panel_dashboard
     */
    public Panel_lecture() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        Table_lecture = new javax.swing.JTable();
        l_record = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        List_department = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        JList_lecturer = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        JList_subjects = new javax.swing.JList<>();
        btn_loadSubject = new javax.swing.JButton();
        btn_loadTeacher = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        f_lecturer = new javax.swing.JTextField();
        f_subject = new javax.swing.JTextField();
        list_date = new javax.swing.JComboBox<>();
        List_startAmpm = new javax.swing.JComboBox<>();
        List_startHour = new javax.swing.JComboBox<>();
        List_startMinutes = new javax.swing.JComboBox<>();
        List_endHour = new javax.swing.JComboBox<>();
        List_endMinutes = new javax.swing.JComboBox<>();
        List_endAmpm = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btn_save = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        btn_reloadTeacher = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        btn_new = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        f_search = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(887, 585));

        Table_lecture.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table_lecture);

        l_record.setBackground(new java.awt.Color(51, 0, 102));
        l_record.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_record.setForeground(new java.awt.Color(255, 255, 255));
        l_record.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_record.setText("Total Lecture Time: 0");
        l_record.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        l_record.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(51, 0, 102));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Institure/Department: ");
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setOpaque(true);

        List_department.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ SELECT ]", "ICT DEPT", "ENGINEERING DEPT", "HUMAN RESOURCE DEPT", "MATHEMATICS DEPT", "SCIENCE DEPT", "NURSING DEPT" }));
        List_department.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                List_departmentActionPerformed(evt);
            }
        });

        JList_lecturer.setBackground(new java.awt.Color(18, 105, 211));
        JList_lecturer.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JList_lecturer.setForeground(new java.awt.Color(255, 255, 255));
        JList_lecturer.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        JList_lecturer.setFixedCellHeight(20);
        JList_lecturer.setSelectionBackground(new java.awt.Color(255, 255, 255));
        JList_lecturer.setSelectionForeground(new java.awt.Color(102, 102, 102));
        jScrollPane2.setViewportView(JList_lecturer);

        JList_subjects.setBackground(new java.awt.Color(204, 51, 0));
        JList_subjects.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JList_subjects.setForeground(new java.awt.Color(255, 255, 255));
        JList_subjects.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        JList_subjects.setFixedCellHeight(20);
        jScrollPane3.setViewportView(JList_subjects);

        btn_loadSubject.setText(">>>");
        btn_loadSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loadSubjectActionPerformed(evt);
            }
        });

        btn_loadTeacher.setText(">>>");
        btn_loadTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loadTeacherActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(19, 104, 175));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("List of Lecturer");
        jLabel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jLabel4.setOpaque(true);

        jLabel5.setBackground(new java.awt.Color(186, 69, 10));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("List of Subjects");
        jLabel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jLabel5.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("*Lecturer: ");
        jLabel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("*Subject: ");
        jLabel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("*Time: ");
        jLabel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel8, gridBagConstraints);

        f_lecturer.setEditable(false);
        f_lecturer.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 210;
        gridBagConstraints.ipady = 12;
        jPanel1.add(f_lecturer, gridBagConstraints);

        f_subject.setEditable(false);
        f_subject.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 12;
        jPanel1.add(f_subject, gridBagConstraints);

        list_date.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ SELECT ]", "MWF - MON, WED, FRI", "TTH - TUE, THU", "MF - MON, FRI", "M5 - WHOLE WEEK" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 12;
        jPanel1.add(list_date, gridBagConstraints);

        List_startAmpm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ AM/PM ]", "AM", "PM" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(List_startAmpm, gridBagConstraints);

        List_startHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[  Hour ]" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(List_startHour, gridBagConstraints);

        List_startMinutes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ Minutes ]" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.ipady = 7;
        jPanel1.add(List_startMinutes, gridBagConstraints);

        List_endHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[  Hour ]" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(List_endHour, gridBagConstraints);

        List_endMinutes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ Minutes ]" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.ipady = 7;
        jPanel1.add(List_endMinutes, gridBagConstraints);

        List_endAmpm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ AM/PM ]", "AM", "PM" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(List_endAmpm, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 51));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("*End: ");
        jLabel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("---------- Time Schedule ----------");
        jLabel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 8;
        jPanel1.add(jLabel11, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("*Days: ");
        jLabel13.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel13, gridBagConstraints);

        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Save_16x16.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Edit_16x16.png"))); // NOI18N
        btn_edit.setText("Edit");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/bin_2.png"))); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/cross_2.png"))); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        btn_reloadTeacher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/bookshelf.png"))); // NOI18N
        btn_reloadTeacher.setText("Reload Teacher List");
        btn_reloadTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reloadTeacherActionPerformed(evt);
            }
        });

        btn_refresh.setBackground(new java.awt.Color(243, 45, 63));
        btn_refresh.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        btn_refresh.setForeground(new java.awt.Color(255, 255, 255));
        btn_refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Synchronize_16x16.png"))); // NOI18N
        btn_refresh.setText("Refresh");
        btn_refresh.setContentAreaFilled(false);
        btn_refresh.setOpaque(true);
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(0, 102, 102));
        jLabel12.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Find_24x24.png"))); // NOI18N
        jLabel12.setText("SEARCH (Course Description, First Name, Lastname): ");
        jLabel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel12.setOpaque(true);

        btn_new.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Add_16x16.png"))); // NOI18N
        btn_new.setText("New");
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });

        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Remove_16x16.png"))); // NOI18N
        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        f_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                f_searchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(f_search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_record, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_refresh))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_reloadTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_loadTeacher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_loadSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(List_department, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_new, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(l_record, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f_search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_save, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                            .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_new, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(List_department, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_loadSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_loadTeacher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_reloadTeacher, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                        .addComponent(btn_cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_editActionPerformed

    private void List_departmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_List_departmentActionPerformed
        if (List_department.getSelectedIndex() != 0) {
            subjectTolist(List_department.getSelectedItem().toString());
        } else {
            ListSubjects();
        }
    }//GEN-LAST:event_List_departmentActionPerformed

    private void btn_loadTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loadTeacherActionPerformed
        String data = JList_lecturer.getSelectedValue();
        String getLecturerID = data.substring(data.indexOf(".") + 2, data.indexOf(","));
        String getLecturerName = data.substring(data.indexOf(",") + 2, data.length());

        lectCode = getLecturerID;
        f_lecturer.setText(getLecturerName);
    }//GEN-LAST:event_btn_loadTeacherActionPerformed

    private void btn_loadSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loadSubjectActionPerformed
        String data = JList_subjects.getSelectedValue();
        String getSubjectCode = data.substring(data.indexOf(".") + 2, data.indexOf(","));
        String getSubjectDesc = data.substring(data.indexOf(",") + 2, data.length());

        subjectCode = getSubjectCode;
        f_subject.setText(getSubjectDesc);
    }//GEN-LAST:event_btn_loadSubjectActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_clearActionPerformed

    private void f_searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_f_searchKeyPressed
        //
    }//GEN-LAST:event_f_searchKeyPressed

    private void btn_reloadTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reloadTeacherActionPerformed
        lecturerTolist();
    }//GEN-LAST:event_btn_reloadTeacherActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_newActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        btnFunction(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> JList_lecturer;
    private javax.swing.JList<String> JList_subjects;
    private javax.swing.JComboBox<String> List_department;
    private javax.swing.JComboBox<String> List_endAmpm;
    private javax.swing.JComboBox<String> List_endHour;
    private javax.swing.JComboBox<String> List_endMinutes;
    private javax.swing.JComboBox<String> List_startAmpm;
    private javax.swing.JComboBox<String> List_startHour;
    private javax.swing.JComboBox<String> List_startMinutes;
    private javax.swing.JTable Table_lecture;
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_loadSubject;
    private javax.swing.JButton btn_loadTeacher;
    private javax.swing.JButton btn_new;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_reloadTeacher;
    private javax.swing.JButton btn_save;
    private javax.swing.JTextField f_lecturer;
    private javax.swing.JTextField f_search;
    private javax.swing.JTextField f_subject;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel l_record;
    private javax.swing.JComboBox<String> list_date;
    // End of variables declaration//GEN-END:variables

    private Lecturer lecturer;
    private Subjects subject;
    private Lecture lecture;
    private String lectCode, subjectCode;

    private void init() {

        lecturer = new Lecturer();
        subject = new Subjects();
        lecture = new Lecture();
        //
        ListLecturer();
        ListSubjects();
        lecturerTolist();

        //Create function time for listhours
        listHours();
        //Table functions
        loadTable();
        showLectures();
        //Table functions
        tableListener();
        //
        btnDefault();
        //
        f_search.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (f_search.getText().equals("")) {
                        showLectures();
                    } else {
                        search(f_search.getText());
                    }
                }
            }

        });
    }

    private byte _userId;
    private int lectureid;

    public byte getUserId() {
        return _userId;//active
    }

    public void setUserId(byte _userId) {
        this._userId = _userId;
    }

    public void loadUserCredentials() {
        _userId = getUserId();

    }

    private void ListLecturer() {
        JList_lecturer.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"..[Search].."};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }

    private void ListSubjects() {
        JList_subjects.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"..[Search].."};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }

    //Farmer to JLIST
    DefaultListModel list_lecture, list_subject;

    private void lecturerTolist() {

        list_lecture = new DefaultListModel();
        lecturer.showLecuterToLecture();
        for (Object lec : lecturer.getData()) {
            list_lecture.addElement(lec.toString().replace("[", "").replace("]", ""));
            JList_lecturer.setModel(list_lecture);
        }
    }

    private void subjectTolist(String key) {

        list_subject = new DefaultListModel();
        subject.showSubjectByDept(key);
        int x = 0;
        for (Object lec : subject.getData()) {
            list_subject.addElement(lec.toString().replace("[", "").replace("]", ""));
            JList_subjects.setModel(list_subject);
            x = list_subject.getSize();
        }

        if (x == 0) {
            ListSubjects();
        }

    }

    private void listHours() {
        //For Hour == start
        byte value_hour = 25;
        for (byte x = 1; x < value_hour; x++) {
            List_startHour.addItem(String.valueOf(x));
            List_endHour.addItem(String.valueOf(x));
        }
        //for Minutes == Start
        byte value_minute = 60;
        for (byte y = 0; y <= value_minute; y++) {
            List_startMinutes.addItem(Functions.filterNumber(y));
            List_endMinutes.addItem(Functions.filterNumber(y));
        }

    }

    //Button functions
    private void btnFunction(ActionEvent evt) {//start function
        if (evt.getSource() == btn_new) {
            btnNew();
        } else if (evt.getSource() == btn_save) {
            insert();
            showLectures();
            f_search.setText("");
        } else if (evt.getSource() == btn_refresh) {
            refresh();
            f_search.setText("");
            f_search.requestFocus();
        } else if (evt.getSource() == btn_clear) {
            clear();
            f_search.setText("");
        } else if (evt.getSource() == btn_edit) {
            update();
            if (f_search.getText().equals("")) {
                showLectures();
            } else {
                search(f_search.getText());
            }
        } else if (evt.getSource() == btn_delete) {
            delete();
            showLectures();
            f_search.setText("");
        } else if (evt.getSource() == btn_cancel) {
            btnDefault();
            clear();
        } else {
        }
    }//end function

    /*insert database*/
    private void insert() {//Start function
        //byte _lectureid //;
        String _lecturer = lectCode;
        String _subject = subjectCode;
        String _timeStart = (List_startHour.getSelectedItem().toString()) + ":"
                + List_startMinutes.getSelectedItem().toString() + " "
                + List_startAmpm.getSelectedItem().toString();
        String _timeEnd = (List_endHour.getSelectedItem().toString()) + ":"
                + List_endMinutes.getSelectedItem().toString() + " "
                + List_endAmpm.getSelectedItem().toString();
        String _date = list_date.getSelectedItem().toString();
        byte _addedby = _userId;
        String _dateadded = Functions.getTimeFormatSQL() + " " + Functions.getTimeHHMMSS();
        //validate
        if (f_lecturer.getText().equals("")
                || f_subject.getText().equals("")
                || List_startHour.getSelectedIndex() == 0
                || List_startMinutes.getSelectedIndex() == 0
                || List_startAmpm.getSelectedIndex() == 0
                || List_endHour.getSelectedIndex() == 0
                || List_endMinutes.getSelectedIndex() == 0
                || List_endAmpm.getSelectedIndex() == 0
                || list_date.getSelectedIndex() == 0) {
            Comp.message("Please fill all the required(*) fields!");
        } else {
            lecture.setLecturer(_lecturer);
            lecture.setSubject(_subject);
            lecture.setTime(_timeStart);
            lecture.setDate(_date);
            lecture.setAddedby(_addedby);
            lecture.setTimeend(_timeEnd);
            lecture.setDateadded(_dateadded);
            lecture.insertLecture();
            //reload functions
            clear();
        }
    }//End function

    /*update database*/
    private void update() {//Start function
        //byte _lectureid //;
        String _lecturer = lectCode;
        String _subject = subjectCode;
        String _timeStart = (List_startHour.getSelectedItem().toString()) + ":"
                + List_startMinutes.getSelectedItem().toString() + " "
                + List_startAmpm.getSelectedItem().toString();
        String _timeEnd = (List_endHour.getSelectedItem().toString()) + ":"
                + List_endMinutes.getSelectedItem().toString() + " "
                + List_endAmpm.getSelectedItem().toString();
        String _date = list_date.getSelectedItem().toString();
        byte _addedby = _userId;
        //validate
        if (f_lecturer.getText().equals("")
                || f_subject.getText().equals("")
                || List_startHour.getSelectedIndex() == 0
                || List_startMinutes.getSelectedIndex() == 0
                || List_startAmpm.getSelectedIndex() == 0
                || List_endHour.getSelectedIndex() == 0
                || List_endMinutes.getSelectedIndex() == 0
                || List_endAmpm.getSelectedIndex() == 0
                || list_date.getSelectedIndex() == 0) {
            Comp.message("Please fill all the required(*) fields!");
        } else {
            lecture.setLecturer(_lecturer);
            lecture.setSubject(_subject);
            lecture.setTime(_timeStart);
            lecture.setDate(_date);
            lecture.setAddedby(_addedby);
            lecture.setTimeend(_timeEnd);
            lecture.setLectureid(lectureid);
            lecture.updateLecture();
            //reload functions
            clear();
        }
    }//End function

    /*delete database*/
    private void delete() {//Start function
        //byte _lectureid //;

        //validate
        if (f_lecturer.getText().equals("")
                || f_subject.getText().equals("")
                || List_startHour.getSelectedIndex() == 0
                || List_startMinutes.getSelectedIndex() == 0
                || List_startAmpm.getSelectedIndex() == 0
                || List_endHour.getSelectedIndex() == 0
                || List_endMinutes.getSelectedIndex() == 0
                || List_endAmpm.getSelectedIndex() == 0
                || list_date.getSelectedIndex() == 0) {
            Comp.message("Please fill all the required(*) fields!");
        } else {
            lecture.setLectureid(lectureid);
            lecture.deleteLecture();
            //reload functions
            clear();
        }
    }//End function

    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    /*Set Custom Table Function*/
    private void loadTable() {
        Table_lecture = new JTable(model);
        String rowHeader[] = {"#", "Subject Code", "Description", "Unit", "Name", "lectureid", "Time Start", "Time End", "Date Schedule", "dateadded", "lec_id"};
        Comp.setTableHeader(rowHeader, model);//Helper class  
        int[] hidCol = {5, 9, 10};
        Comp.setHideTableColumn(Table_lecture, hidCol);
        String keySize[] = {"0:30", "1:100", "2:210", "3:50", "4:150", "6:80", "7:90", "8:130"};
        Comp.keySizeCell(keySize, Table_lecture);
        Comp.tableAddOnss(Table_lecture, jScrollPane1);
    }

    private void showLectures() {//Start function
        model.setRowCount(0);
        lecture.showLecture();
        for (Object data : lecture.getData()) {
            model.addRow((Vector) data);
        }
        l_record.setText("Total Lecture Time: " + Table_lecture.getRowCount());

    }//end function

    private void search(String key) {//Start function
        model.setRowCount(0);
        lecture.searchLecture(key);
        for (Object data : lecture.getData()) {
            model.addRow((Vector) data);
        }
        l_record.setText("Total Lecture Time: " + Table_lecture.getRowCount());

    }//end function

    /*clear*/
    private void clear() {
        f_lecturer.setText("");
        f_subject.setText("");

        List_startHour.setSelectedIndex(0);
        List_startMinutes.setSelectedIndex(0);
        List_startAmpm.setSelectedIndex(0);
        List_endHour.setSelectedIndex(0);
        List_endMinutes.setSelectedIndex(0);
        List_endAmpm.setSelectedIndex(0);
        list_date.setSelectedIndex(0);
        List_department.setSelectedIndex(0);
        subjectCode = "";
        lectCode = "";

        lecturerTolist();
        subjectTolist("");
    }

    /*refresh*/
    private void refresh() {
        f_search.setText("");
        showLectures();
    }

    //clicking table function
    private void tableListener() {
        //key adapter
        Table_lecture.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_UP || ke.getKeyCode() == KeyEvent.VK_DOWN) {
                    int row = Table_lecture.getSelectedRow();
                    lectCode = Table_lecture.getModel().getValueAt(row, 10).toString();
                    subjectCode = Table_lecture.getModel().getValueAt(row, 1).toString();
                    f_lecturer.setText(Table_lecture.getModel().getValueAt(row, 4).toString());
                    f_subject.setText(Table_lecture.getModel().getValueAt(row, 2).toString());
                    list_date.setSelectedItem(Table_lecture.getModel().getValueAt(row, 8).toString());
                    String startTime = Table_lecture.getModel().getValueAt(row, 6).toString();
                    List_startHour.setSelectedItem(hourLabel(startTime, "HOUR"));
                    List_startMinutes.setSelectedItem(hourLabel(startTime, "Minute"));
                    List_startAmpm.setSelectedItem(hourLabel(startTime, "--"));
                    String endTime = Table_lecture.getModel().getValueAt(row, 7).toString();
                    List_endHour.setSelectedItem(hourLabel(endTime, "HOUR"));
                    List_endMinutes.setSelectedItem(hourLabel(endTime, "Minute"));
                    List_endAmpm.setSelectedItem(hourLabel(endTime, "--"));
                    lectureid = Integer.parseInt(Table_lecture.getModel().getValueAt(row, 5).toString());
                    //
                    btnEdit();
                }
            }
        });
        //Mouse Adapter
        Table_lecture.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                int row = Table_lecture.getSelectedRow();
                lectCode = Table_lecture.getModel().getValueAt(row, 10).toString();
                subjectCode = Table_lecture.getModel().getValueAt(row, 1).toString();
                f_lecturer.setText(Table_lecture.getModel().getValueAt(row, 4).toString());
                f_subject.setText(Table_lecture.getModel().getValueAt(row, 2).toString());
                list_date.setSelectedItem(Table_lecture.getModel().getValueAt(row, 8).toString());
                String startTime = Table_lecture.getModel().getValueAt(row, 6).toString();
                List_startHour.setSelectedItem(hourLabel(startTime, "HOUR"));
                List_startMinutes.setSelectedItem(hourLabel(startTime, "Minute"));
                List_startAmpm.setSelectedItem(hourLabel(startTime, "--"));
                String endTime = Table_lecture.getModel().getValueAt(row, 7).toString();
                List_endHour.setSelectedItem(hourLabel(endTime, "HOUR"));
                List_endMinutes.setSelectedItem(hourLabel(endTime, "Minute"));
                List_endAmpm.setSelectedItem(hourLabel(endTime, "--"));
                lectureid = Integer.parseInt(Table_lecture.getModel().getValueAt(row, 5).toString());
                //
                btnEdit();
            }
        });
    }//end function

    /*Get Panel Lecture*/
    private String hourLabel(String timeText, String key) {//Start function
        String getTime;

        switch (key.toLowerCase()) {
            case "hour":
                getTime = timeText.substring(0, timeText.indexOf(":"));
                break;
            case "minute":
                getTime = timeText.substring(timeText.indexOf(":") + 1, timeText.indexOf(":") + 3);
                break;
            default:
                getTime = timeText.substring(timeText.length() - 2, timeText.length());
                break;
        }
        return getTime;
    }//end function

    private void btnDefault() {
        f_lecturer.setEnabled(false);
        f_subject.setEnabled(false);
        List_startHour.setEnabled(false);
        List_startMinutes.setEnabled(false);
        List_startAmpm.setEnabled(false);
        List_endHour.setEnabled(false);
        List_endMinutes.setEnabled(false);
        List_endAmpm.setEnabled(false);
        list_date.setEnabled(false);
        List_department.setEnabled(false);
        //button
        btn_new.setEnabled(true);
        btn_save.setEnabled(false);
        btn_delete.setEnabled(false);
        btn_edit.setEnabled(false);
        btn_clear.setEnabled(false);
        btn_cancel.setEnabled(false);

        //
        btn_loadSubject.setEnabled(false);
        btn_loadTeacher.setEnabled(false);
        btn_reloadTeacher.setEnabled(false);
        JList_lecturer.setEnabled(false);
        JList_subjects.setEnabled(false);
    }

    private void btnNew() {//Start
        f_lecturer.setEnabled(true);
        f_subject.setEnabled(true);
        List_startHour.setEnabled(true);
        List_startMinutes.setEnabled(true);
        List_startAmpm.setEnabled(true);
        List_endHour.setEnabled(true);
        List_endMinutes.setEnabled(true);
        List_endAmpm.setEnabled(true);
        list_date.setEnabled(true);
        List_department.setEnabled(true);
        List_department.setEnabled(true);
        //button
        btn_new.setEnabled(false);
        btn_save.setEnabled(true);
        btn_delete.setEnabled(false);
        btn_edit.setEnabled(false);
        btn_clear.setEnabled(true);
        btn_cancel.setEnabled(true);

        //
        btn_loadSubject.setEnabled(true);
        btn_loadTeacher.setEnabled(true);
        btn_reloadTeacher.setEnabled(true);
        JList_lecturer.setEnabled(true);
        JList_subjects.setEnabled(true);
    }//end

    private void btnEdit() {//Start
        f_lecturer.setEnabled(true);
        f_subject.setEnabled(true);
        List_startHour.setEnabled(true);
        List_startMinutes.setEnabled(true);
        List_startAmpm.setEnabled(true);
        List_endHour.setEnabled(true);
        List_endMinutes.setEnabled(true);
        List_endAmpm.setEnabled(true);
        list_date.setEnabled(true);
        List_department.setEnabled(true);
        List_department.setEnabled(true);
        List_department.setEnabled(true);
        //button
        btn_new.setEnabled(false);
        btn_save.setEnabled(false);
        btn_delete.setEnabled(true);
        btn_edit.setEnabled(true);
        btn_clear.setEnabled(false);
        btn_cancel.setEnabled(true);

        //
        btn_loadSubject.setEnabled(true);
        btn_loadTeacher.setEnabled(true);
        btn_reloadTeacher.setEnabled(true);
        JList_lecturer.setEnabled(true);
        JList_subjects.setEnabled(true);
    }//end

}
