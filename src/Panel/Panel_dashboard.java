/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panel;

import Class.DBCOnnection;
import Class.ReportQuery;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author user
 */
public class Panel_dashboard extends javax.swing.JPanel {

    /**
     * Creates new form Panel_dashboard
     */
    public Panel_dashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        l_totalStuds = new javax.swing.JLabel();
        l_totalSubject = new javax.swing.JLabel();
        l_totalInstructors = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(887, 585));

        l_totalStuds.setBackground(new java.awt.Color(0, 102, 102));
        l_totalStuds.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        l_totalStuds.setForeground(new java.awt.Color(255, 255, 255));
        l_totalStuds.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_totalStuds.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/student1.png"))); // NOI18N
        l_totalStuds.setText("Total Students Enrolled: 0");
        l_totalStuds.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        l_totalStuds.setOpaque(true);
        l_totalStuds.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        l_totalSubject.setBackground(new java.awt.Color(213, 59, 32));
        l_totalSubject.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        l_totalSubject.setForeground(new java.awt.Color(255, 255, 255));
        l_totalSubject.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_totalSubject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/enrollment.png"))); // NOI18N
        l_totalSubject.setText("Total Subject(s): 0");
        l_totalSubject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        l_totalSubject.setOpaque(true);
        l_totalSubject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        l_totalInstructors.setBackground(new java.awt.Color(34, 103, 208));
        l_totalInstructors.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        l_totalInstructors.setForeground(new java.awt.Color(255, 255, 255));
        l_totalInstructors.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_totalInstructors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/teacher.png"))); // NOI18N
        l_totalInstructors.setText("Total Instructor(s): 0");
        l_totalInstructors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        l_totalInstructors.setOpaque(true);
        l_totalInstructors.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(4, 204));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(4, 204));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(l_totalStuds, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_totalInstructors, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_totalSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_totalStuds, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_totalInstructors, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_totalSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel l_totalInstructors;
    private javax.swing.JLabel l_totalStuds;
    private javax.swing.JLabel l_totalSubject;
    // End of variables declaration//GEN-END:variables

    private String schoolYear, semester;
    private byte userId;
    private final ReportQuery rq = new ReportQuery();
    private DBCOnnection db = new DBCOnnection();
    PreparedStatement pst;
    ResultSet rs;

    public byte getUserId() {
        return userId;//active
    }

    public void setUserId(byte _userId) {
        this.userId = _userId;
    }

    public String getSemester() {
        return semester;
    }

    public void setSemester(String semester) {
        this.semester = semester;
    }

    public void setSchoolYear(String sy) {
        this.schoolYear = sy;
    }

    public String getSchoolYear() {
        return schoolYear;
    }

    public void getDataToAccess() {

        semester = getSemester();
        schoolYear = getSchoolYear();
        userId = getUserId();

        //load report
        l_totalInstructors.setText("Total Instructor(s): " + rq.getTotalCount(schoolYear, semester, "lec_id"));
        l_totalStuds.setText("Total Student(s) Enrolled: " + rq.getTotalCount(schoolYear, semester, "studentid"));
        l_totalSubject.setText("Total Subject(s): " + rq.getTotalCount(schoolYear, semester, "sub_code"));
        //Graphs
        totalSubjects(schoolYear, semester);
        totalCourse(schoolYear, semester);
        loadAllCourse(schoolYear, semester);
    }

    private void totalSubjects(String schoolYear, String semester) {
        try {
            String query = "SELECT subject as subjects,\n"
                    + "            count(c_description) as totalStudent\n"
                    + "\n"
                    + "\n"
                    + "            FROM enrollment e,lecture l,lecturer lec,course c,student stud, subjects subs,room ro\n"
                    + "\n"
                    + "            where e.e_lecture = l.lectureid\n"
                    + "            and subs.sub_code = l.subject\n"
                    + "            and lec.lec_id = l.lecturer\n"
                    + "            and c.courseid = e.e_course\n"
                    + "            and ro.rid = e.e_room\n"
                    + "            \n"
                    + "            and stud.studentid = e.e_student and e.e_schoolyear = '" + schoolYear + "' and e.e_semester  = '" + semester + "'\n"
                    + "            group by l.lectureid order by c_name asc";
            DefaultPieDataset dataset = new DefaultPieDataset();
//            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            String sql = query;
            db.dbConnection();
            pst = db.getCon().prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                String subjects = rs.getString("subjects");
                double _farmZIe = rs.getDouble("totalStudent");//Farm Size
                dataset.setValue(subjects, _farmZIe);
            }

            JFreeChart chart = ChartFactory.createPieChart(
                    "Student/Subject", // chart title
                    dataset, // data
                    true, // include legend
                    true,
                    false);
            PieSectionLabelGenerator labelGenerator = new StandardPieSectionLabelGenerator(
                    "Marks {0} : ({2})", new DecimalFormat("0"), new DecimalFormat("0%"));
            ((PiePlot) chart.getPlot()).setLabelGenerator(labelGenerator);
            chart.setBackgroundPaint(Color.WHITE);
           
            // Create Panel  

            ChartPanel frame = new ChartPanel(chart);
            jPanel1.removeAll();
            jPanel1.add(frame, BorderLayout.CENTER);
            jPanel1.validate();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void totalCourse(String _schoolYear, String _semester) {
        try {
            String query = "SELECT c_name, e_yearlevel,count(c_name) as registeredPerCourse\n"
                    + "FROM enrollment e,lecture l,lecturer lec,course c,student stud, subjects subs,room ro\n"
                    + "where e.e_lecture = l.lectureid\n"
                    + "and subs.sub_code = l.subject\n"
                    + "and lec.lec_id = l.lecturer\n"
                    + "and c.courseid = e.e_course\n"
                    + "and ro.rid = e.e_room\n"
                    + "and stud.studentid = e.e_student and e.e_schoolyear = '" + _schoolYear + "'\n"
                    + "and e.e_semester = '" + _semester + "'\n"
                    + "group by c_name,e_yearlevel order by c_name asc";
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            String sql = query;
            db.dbConnection();
            pst = db.getCon().prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                String subjects = rs.getString("c_name");
                String e_yearlevel = rs.getString("e_yearlevel");
                double _registeredPerCourse = rs.getDouble("registeredPerCourse");//Farm Size
                dataset.setValue(_registeredPerCourse, e_yearlevel, subjects);
            }

            JFreeChart chart = ChartFactory.createBarChart3D("", "School Year & Semester", "Student Per Course", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = chart.getCategoryPlot();

            plot.setBackgroundPaint(Color.white);
            plot.setRangeGridlinePaint(Color.BLACK);
            plot.getDomainAxis().setCategoryMargin(0.0);
            plot.setOrientation(PlotOrientation.VERTICAL);
            // Reduce left and right margin
            plot.getDomainAxis().setLowerMargin(0.0);
            plot.getDomainAxis().setUpperMargin(0.0);
            //set  bar chart color
            ((BarRenderer) plot.getRenderer()).setBarPainter(new StandardBarPainter());
            BarRenderer r = (BarRenderer) chart.getCategoryPlot().getRenderer();
            //3 Series
            r.setSeriesPaint(0, Color.ORANGE);
            r.setSeriesPaint(1, Color.CYAN);
            r.setSeriesPaint(2, Color.GREEN);
            //3 Series
            r.setSeriesItemLabelGenerator(0, new StandardCategoryItemLabelGenerator());
            r.setSeriesItemLabelsVisible(0, true);
            r.setSeriesItemLabelGenerator(1, new StandardCategoryItemLabelGenerator());
            r.setSeriesItemLabelsVisible(1, true);
            r.setSeriesItemLabelGenerator(2, new StandardCategoryItemLabelGenerator());
            r.setSeriesItemLabelsVisible(2, true);

            chart.getCategoryPlot().setRenderer(r);

            ChartPanel frame = new ChartPanel(chart);
            jPanel2.removeAll();
            jPanel2.add(frame, BorderLayout.CENTER);
            jPanel2.validate();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadAllCourse(String _schoolYear, String _semester) {
        try {
            String query = "SELECT c_name,subject as subjects,\n"
                    + "concat(lec_fname,' ', SUBSTRING(lec_mname,1,1),'. ',lec_lname) as teacher,\n"
                    + "count(c_description) as totalStudent\n"
                    + "\n"
                    + "\n"
                    + "FROM enrollment e,lecture l,lecturer lec,course c,student stud, subjects subs,room ro\n"
                    + "\n"
                    + "where e.e_lecture = l.lectureid\n"
                    + "and subs.sub_code = l.subject\n"
                    + "and lec.lec_id = l.lecturer\n"
                    + "and c.courseid = e.e_course\n"
                    + "and ro.rid = e.e_room\n"
                    + "\n"
                    + "and stud.studentid = e.e_student and e.e_schoolyear = '" + _schoolYear + "' and e.e_semester = '" + _semester + "'\n"
                    + "group by c_name,subjects order by c_name asc";
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            String sql = query;
            db.dbConnection();
            pst = db.getCon().prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                String subjects = rs.getString("c_name");
                String _subject = rs.getString("subjects");
                double _totalStudent = rs.getDouble("totalStudent");//Farm Size
                dataset.setValue(_totalStudent, _subject, subjects); 
            }
            JFreeChart chart = ChartFactory.createBarChart3D("", "School Year & Semester", "Student Per Course", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = chart.getCategoryPlot();
            plot.setBackgroundPaint(Color.white);
            plot.setRangeGridlinePaint(Color.BLACK);
            plot.getDomainAxis().setCategoryMargin(0.0);
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            // Reduce left and right margin
            plot.getDomainAxis().setLowerMargin(0.0);
            plot.getDomainAxis().setUpperMargin(0.0);
            //set  bar chart color
            ((BarRenderer) plot.getRenderer()).setBarPainter(new StandardBarPainter());
            BarRenderer r = (BarRenderer) chart.getCategoryPlot().getRenderer();
            //3 Series
            r.setSeriesPaint(0, Color.RED);
            r.setSeriesPaint(1, Color.MAGENTA);
            r.setSeriesPaint(2, Color.YELLOW);
            //3 Series
            r.setSeriesItemLabelGenerator(0, new StandardCategoryItemLabelGenerator());
            r.setSeriesItemLabelsVisible(0, true);
            r.setSeriesItemLabelGenerator(1, new StandardCategoryItemLabelGenerator());
            r.setSeriesItemLabelsVisible(1, true);
            r.setSeriesItemLabelGenerator(2, new StandardCategoryItemLabelGenerator());
            r.setSeriesItemLabelsVisible(2, true);
            chart.getCategoryPlot().setRenderer(r);
            ChartPanel frame = new ChartPanel(chart);
            jPanel3.removeAll();
            jPanel3.add(frame, BorderLayout.CENTER);
            jPanel3.validate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
