/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panel;

import Class.Course;
import Class.Enrollment;
import Class.Room;
import Dialog.Dialog_Student;
import Dialog.Dialog_lecture;
import Dialog.ReportJDBCD;
import HELRER.Comp;
import HELRER.Functions;

import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Panel_Enrollment extends javax.swing.JPanel {

    /**
     * Creates new form Panel_dashboard
     */
    public Panel_Enrollment() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        l_schoolYearLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_enrollment = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        List_Course = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        List_totalStudents = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jXSearchField1 = new javax.swing.JTextField();
        jXSearchField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        l_totalstuds = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        f_student = new javax.swing.JTextField();
        btn_selectStudent = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        f_semester = new javax.swing.JTextField();
        btn_selectLecture = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        f_summary = new javax.swing.JTextArea();
        l_id = new javax.swing.JLabel();
        f_lecture = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        List_yearLevel = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        f_schoolyear = new javax.swing.JTextField();
        List_course = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        List_room = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        btn_clear = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        btn_new = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btn_cor = new javax.swing.JButton();
        f_search = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(845, 585));

        l_schoolYearLabel.setBackground(new java.awt.Color(255, 51, 102));
        l_schoolYearLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        l_schoolYearLabel.setForeground(new java.awt.Color(255, 255, 255));
        l_schoolYearLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l_schoolYearLabel.setText("School Year: 0000-0000");
        l_schoolYearLabel.setToolTipText("");
        l_schoolYearLabel.setOpaque(true);

        Table_enrollment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_enrollment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_enrollmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_enrollment);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Enrollment Record"));

        List_Course.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(List_Course);

        jLabel2.setBackground(new java.awt.Color(51, 0, 102));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Total Enrolless/Department  ");
        jLabel2.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(51, 0, 102));
        jLabel3.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Total Enrolless/Subject  ");
        jLabel3.setOpaque(true);

        List_totalStudents.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        List_totalStudents.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane4.setViewportView(List_totalStudents);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Synchronize_16x16.png"))); // NOI18N
        jButton2.setToolTipText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Synchronize_16x16.png"))); // NOI18N
        jButton3.setToolTipText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jXSearchField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jXSearchField1KeyPressed(evt);
            }
        });

        jXSearchField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jXSearchField2KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXSearchField2, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXSearchField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXSearchField1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jXSearchField2)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
        );

        jLabel4.setBackground(new java.awt.Color(0, 102, 102));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Find_24x24.png"))); // NOI18N
        jLabel4.setText("Search Course/Subject: ");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel4.setOpaque(true);

        l_totalstuds.setBackground(new java.awt.Color(51, 0, 102));
        l_totalstuds.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_totalstuds.setForeground(new java.awt.Color(255, 255, 255));
        l_totalstuds.setText("Total Enrollment : 0");
        l_totalstuds.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        l_totalstuds.setOpaque(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Enrollment Form"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 51));
        jLabel5.setText(" * Student: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(jLabel5, gridBagConstraints);

        f_student.setEditable(false);
        f_student.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 68;
        jPanel2.add(f_student, gridBagConstraints);

        btn_selectStudent.setBackground(new java.awt.Color(68, 163, 33));
        btn_selectStudent.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        btn_selectStudent.setForeground(new java.awt.Color(255, 255, 255));
        btn_selectStudent.setText("Select");
        btn_selectStudent.setContentAreaFilled(false);
        btn_selectStudent.setOpaque(true);
        btn_selectStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectStudentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(btn_selectStudent, gridBagConstraints);

        jLabel6.setText("--- Lecture Summary ---");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jLabel6, gridBagConstraints);

        f_semester.setEditable(false);
        f_semester.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 98;
        jPanel2.add(f_semester, gridBagConstraints);

        btn_selectLecture.setBackground(new java.awt.Color(243, 45, 63));
        btn_selectLecture.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        btn_selectLecture.setForeground(new java.awt.Color(255, 255, 255));
        btn_selectLecture.setText("Select");
        btn_selectLecture.setContentAreaFilled(false);
        btn_selectLecture.setOpaque(true);
        btn_selectLecture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectLectureActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel2.add(btn_selectLecture, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setText("* Semester:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(jLabel7, gridBagConstraints);

        f_summary.setEditable(false);
        f_summary.setColumns(20);
        f_summary.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        f_summary.setLineWrap(true);
        f_summary.setRows(5);
        f_summary.setWrapStyleWord(true);
        jScrollPane2.setViewportView(f_summary);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 26;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        l_id.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_id.setForeground(new java.awt.Color(153, 0, 51));
        l_id.setText("ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel2.add(l_id, gridBagConstraints);

        f_lecture.setEditable(false);
        f_lecture.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 68;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel2.add(f_lecture, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 51));
        jLabel9.setText("* School Year: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(jLabel9, gridBagConstraints);

        List_yearLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ Select ]", "Freshmen", "Sophomore", "Junior", "Senior" }));
        List_yearLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                List_yearLevelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        jPanel2.add(List_yearLevel, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 51));
        jLabel10.setText("* Year Level:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(jLabel10, gridBagConstraints);

        f_schoolyear.setEditable(false);
        f_schoolyear.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 98;
        jPanel2.add(f_schoolyear, gridBagConstraints);

        List_course.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ SELECT ]" }));
        List_course.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                List_courseMouseClicked(evt);
            }
        });
        List_course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                List_courseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(List_course, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setText("* Course: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(jLabel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 0, 51));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("*Room: ");
        jLabel12.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel2.add(jLabel12, gridBagConstraints);

        List_room.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[ SELECT ]" }));
        List_room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                List_roomActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(List_room, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setText("* Lecture: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel2.add(jLabel13, gridBagConstraints);

        btn_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/cross_2.png"))); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Save_16x16.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_new.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Add_16x16.png"))); // NOI18N
        btn_new.setText("New");
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });

        btn_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Edit_16x16.png"))); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Remove_16x16.png"))); // NOI18N
        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(243, 45, 63));
        jButton1.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/Synchronize_16x16.png"))); // NOI18N
        jButton1.setText("Refresh");
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btn_cor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Asset/bookshelf.png"))); // NOI18N
        btn_cor.setText("COR");
        btn_cor.setToolTipText("Certificate of Registration");
        btn_cor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_corActionPerformed(evt);
            }
        });

        f_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                f_searchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_new, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_cancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_cor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(l_schoolYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(f_search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_totalstuds, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_new, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_cor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(l_schoolYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(280, 280, 280)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(l_totalstuds, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(f_search, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_selectStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectStudentActionPerformed
        btnFunction(evt);

    }//GEN-LAST:event_btn_selectStudentActionPerformed

    private void btn_selectLectureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectLectureActionPerformed
        btnFunction(evt);

    }//GEN-LAST:event_btn_selectLectureActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_saveActionPerformed

    private void List_courseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_List_courseMouseClicked
        //
    }//GEN-LAST:event_List_courseMouseClicked

    private void List_courseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_List_courseActionPerformed
        if (List_course.getSelectedIndex() != 0) {
            String listVal[] = List_course.getSelectedItem().toString().split("-");
            courseId = course.getCourseId(listVal[0]);
        }
    }//GEN-LAST:event_List_courseActionPerformed

    private void f_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_f_searchKeyReleased
        //
    }//GEN-LAST:event_f_searchKeyReleased

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_updateActionPerformed

    private void Table_enrollmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_enrollmentMouseClicked
        //
    }//GEN-LAST:event_Table_enrollmentMouseClicked

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        btnFunction(evt);            // TODO add your handling code here:
    }//GEN-LAST:event_btn_newActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        btnFunction(evt);
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void List_roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_List_roomActionPerformed
        if (List_room.getSelectedIndex() != 0) {
            String listVal[] = List_room.getSelectedItem().toString().split(",");
            roomId = room.getRoomId(listVal[0]);
        }
    }//GEN-LAST:event_List_roomActionPerformed

    private void List_yearLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_List_yearLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_List_yearLevelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        f_search.setText("");
        loadEnrollmentData(_yearInclusive);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jXSearchField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXSearchField1KeyPressed
        //
    }//GEN-LAST:event_jXSearchField1KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadEnrolless();
        jXSearchField1.setText("");
        jXSearchField1.requestFocus();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jXSearchField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXSearchField2KeyPressed
        //

    }//GEN-LAST:event_jXSearchField2KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        loadStudentPerCourse();
        jXSearchField2.setText("");
        jXSearchField2.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btn_corActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_corActionPerformed

        btnFunction(evt);


    }//GEN-LAST:event_btn_corActionPerformed

    private void f_searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_f_searchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_f_searchKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> List_Course;
    private javax.swing.JComboBox<String> List_course;
    private javax.swing.JComboBox<String> List_room;
    private javax.swing.JList<String> List_totalStudents;
    private javax.swing.JComboBox<String> List_yearLevel;
    private javax.swing.JTable Table_enrollment;
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_cor;
    private javax.swing.JButton btn_new;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_selectLecture;
    private javax.swing.JButton btn_selectStudent;
    private javax.swing.JButton btn_update;
    private javax.swing.JTextField f_lecture;
    private javax.swing.JTextField f_schoolyear;
    private javax.swing.JTextField f_search;
    private javax.swing.JTextField f_semester;
    private javax.swing.JTextField f_student;
    private javax.swing.JTextArea f_summary;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jXSearchField1;
    private javax.swing.JTextField jXSearchField2;
    private javax.swing.JLabel l_id;
    private javax.swing.JLabel l_schoolYearLabel;
    private javax.swing.JLabel l_totalstuds;
    // End of variables declaration//GEN-END:variables

    private String stud_id, stud_fullname;
    private int lectureId = 0, courseId = 0, enrollmentId = 0, roomId = 0;
    Course course;
    Enrollment enrollment;
    Room room;
    private byte userId;

    private void init() {
        course = new Course();
        enrollment = new Enrollment();
        room = new Room();
        //
        loadCourse();
        loadRoom();
        //Table Header
        loadTableHeader();
        tableListener();
        //set the default components
        default_ED();
        //hide user id
        l_id.hide();

        f_search.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (f_search.getText().equals("")) {
                        loadEnrollmentData(_yearInclusive);
                    } else {
                        searhEnrollment(_yearInclusive, f_search.getText());
                    }
                }
            }

        });
        jXSearchField1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_ENTER) {

                    String key = jXSearchField1.getText();
                    loadSearchEnrolless(key);

                }
            }

        });
        jXSearchField2.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_ENTER) {
                    loadSearchStudentPerCourse(jXSearchField2.getText());
                }
            }

        });

    }

    public void getYearSemesterData() {
        _yearInclusive = getYearInclusive();
        _semester = getSemester();
        userId = getUserId();
        //
        f_schoolyear.setText(_yearInclusive);
        f_semester.setText(_semester);
        //
        l_schoolYearLabel.setText("School Year: " + _yearInclusive+" "+_semester);
        //
        loadEnrollmentData(_yearInclusive);
        l_id.setText(String.valueOf(userId));
        //load enrolless
        loadEnrolless();
        loadStudentPerCourse();

    }

    private String _yearInclusive, _semester;

    public byte getUserId() {
        return userId;
    }

    public void setUserId(byte userId) {
        this.userId = userId;
    }

    public String getYearInclusive() {
        return _yearInclusive;
    }

    public void setYearInclusive(String _yearInclusive) {
        this._yearInclusive = _yearInclusive;
    }

    public String getSemester() {
        return _semester;
    }

    public void setSemester(String _semester) {
        this._semester = _semester;
    }

    /*load courses*/
    private void loadCourse() {//start
        ArrayList<Course> cour = course.addListToList();
        for (int x = 0; x < cour.size(); x++) {
            List_course.addItem(cour.get(x).getC_name());
        }
    }//end
//    List_room

    private void loadRoom() {
        ArrayList<Room> roomList = room.loadRoom();
        for (int x = 0; x < roomList.size(); x++) {
            List_room.addItem(roomList.get(x).getRname());
        }
    }

    private void selectStudent() {//start
        try {
            Dialog_Student studentDialog = new Dialog_Student(null, true);
            studentDialog.show();
            //
            if (studentDialog.getStud_fullname().equals("")) {
                f_student.setText("");
                stud_id = "";
            } else {
                stud_id = studentDialog.getStud_id();
                stud_fullname = studentDialog.getStud_fullname();
                f_student.setText(stud_fullname);

            }
        } catch (NullPointerException e) {
            //exception
        }

    }//end

    private void selectLecture() {
        try {
            Dialog_lecture lectureDialog = new Dialog_lecture(null, true);
            lectureDialog.show();
            //
            if (lectureDialog.getLectureSubject().equals("")) {
                f_lecture.setText("");
                f_summary.setText("");
                lectureId = 0;

            } else {
                f_lecture.setText(lectureDialog.getLectureSubject());
                f_summary.setText(lectureDialog.getLectureDescription());
                lectureId = lectureDialog.getLectureId();
            }
        } catch (NullPointerException e) {
        }

    }

    /*Accessing button functions from its source*/
    private void btnFunction(ActionEvent evt) {//start
        if (evt.getSource() == btn_save) {
            insert();
            //update List Componets
            loadCourse();
            loadStudentPerCourse();
            //
            loadEnrolless();

            //
            default_ED();
        } else if (evt.getSource() == btn_update) {
            update();
            //check for current data to remain onced update
            if (f_search.getText().equals("")) {
                loadEnrollmentData(_yearInclusive);
            } else {
                searhEnrollment(_yearInclusive, f_search.getText());
            }
            //update List Componets
            loadCourse();
            loadEnrolless();

        } else if (evt.getSource() == btn_selectLecture) {
            selectLecture();
        } else if (evt.getSource() == btn_selectStudent) {
            selectStudent();
        } else if (evt.getSource() == btn_clear) {
            clear();
            loadEnrollmentData(_yearInclusive);
        } else if (evt.getSource() == btn_new) {
            addComp_ED();
            clear();
        } else if (evt.getSource() == btn_cancel) {
            default_ED();
            clear();
            loadEnrollmentData(_yearInclusive);
        } else {
            printCOR();
        }
    }//end

    /*Insert record to database*/
    private void insert() {//start
//        int _e_id;
        int _e_lecture = lectureId;
        int _e_course = courseId;
        String _e_student = stud_id;
        String _e_dateenroll = Functions.getTimeFormatSQL() + " " + Functions.getTimeHHMMSS();
        byte _e_addedby = Byte.parseByte(l_id.getText());
        String _e_yearLevel = List_yearLevel.getSelectedItem().toString();
        String _e_semester = _semester;
        String _e_schoolyear = _yearInclusive;
        int _roomId = roomId;
        //
        if (f_student.getText().equals("")
                || f_lecture.getText().equals("")
                || f_schoolyear.getText().equals("")
                || f_semester.getText().equals("")
                || List_yearLevel.getSelectedIndex() == 0
                || List_course.getSelectedIndex() == 0) {
            Comp.message("Please fill all the required(*) fields!");
        } else {

            System.out.println(userId);
            enrollment.setE_lecture(_e_lecture);
            enrollment.setE_course(_e_course);
            enrollment.setE_student(_e_student);
            enrollment.setE_dateenroll(_e_dateenroll);
            enrollment.setE_addedby(_e_addedby);
            enrollment.setE_yearLevel(_e_yearLevel);
            enrollment.setE_semester(_e_semester);
            enrollment.setE_schoolyear(_e_schoolyear);
            enrollment.setE_room(_roomId);

            enrollment.insertEnrollment();
            //
            loadEnrollmentData(_yearInclusive);

        }
    }//end

    /*Insert record to database*/
    private void update() {//start
//        int _e_id;
        int _e_lecture = lectureId;
        int _e_course = courseId;
        String _e_student = stud_id;
        String _e_dateenroll = Functions.getTimeFormatSQL() + " " + Functions.getTimeHHMMSS();
        byte _e_addedby = Byte.parseByte(l_id.getText());
        String _e_yearLevel = List_yearLevel.getSelectedItem().toString();
        String _e_semester = _semester;
        String _e_schoolyear = _yearInclusive;
        int _roomId = roomId;
        //
        if (f_student.getText().equals("")
                || f_lecture.getText().equals("")
                || f_schoolyear.getText().equals("")
                || f_semester.getText().equals("")
                || List_yearLevel.getSelectedIndex() == 0
                || List_course.getSelectedIndex() == 0) {
            Comp.message("Please fill all the required(*) fields!");
        } else {
            enrollment.setE_lecture(_e_lecture);
            enrollment.setE_course(_e_course);
            enrollment.setE_student(_e_student);
            enrollment.setE_dateenroll(_e_dateenroll);
            enrollment.setE_addedby(_e_addedby);
            enrollment.setE_yearLevel(_e_yearLevel);
            enrollment.setE_semester(_e_semester);
            enrollment.setE_schoolyear(_e_schoolyear);
            enrollment.setE_room(_roomId);
            enrollment.setE_id(enrollmentId);
            enrollment.updateEnrollment();
            //
            loadEnrollmentData(_yearInclusive);
        }
    }//end

    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int i, int i1) {
            return false;
        }
    };

    private void loadTableHeader() {//Start
        Table_enrollment = new JTable(model);
        String rowHeader[] = {"#", "e_id", "e_lecture",
            "e_course", "LRN", "Date Enroll",
            "Course", "Student", "Teacher", "Subject", "Class Schedule", "Time Start", "Time End",
            "Year Level", "Semester", "School Year", "Unit", "Description", "ROOMID", "Room", "Building"};
        Comp.setTableHeader(rowHeader, model);//Helper class  
        int[] hidCol = {1, 2, 3, 16, 17, 18};
        Comp.setHideTableColumn(Table_enrollment, hidCol);
        String keySize[] = {"0:50", "4:70", "5:100", "6:120", "7:170", "8:170", "9:100", "10:150", "11:80", "12:80", "13:100", "14:100",
            "15:100", "19:80", "20:150"};
        Comp.keySizeCell(keySize, Table_enrollment);
        Comp.tableAddOnss(Table_enrollment, jScrollPane1);
    }//End

    private void loadEnrollmentData(String _schoolYear) {//Start
        model.setRowCount(0);
        enrollment.showEnrollment(_schoolYear,_semester);
        for (Object data : enrollment.getData()) {
            model.addRow((Vector) data);
        }
        l_totalstuds.setText("Total Enrollment : " + Table_enrollment.getRowCount());

    }//End

    private void searhEnrollment(String _schoolYear, String key) {//Start
        model.setRowCount(0);
        enrollment.searchEnrollment(_schoolYear, key,_semester);
        for (Object data : enrollment.getData()) {
            model.addRow((Vector) data);
        }
        l_totalstuds.setText("Total Enrollment : " + Table_enrollment.getRowCount());
    }//End

    //load enrolless per subject and course
    DefaultListModel listModelGenEnrollment, listModelStudPerCourse;

    private void loadEnrolless() {//start
        listModelGenEnrollment = new DefaultListModel();
        enrollment.enrolleesSubject(_yearInclusive,_semester);
        for (Object c : enrollment.getData()) {
            listModelGenEnrollment.addElement(c.toString().replace("[", "").replace("]", ""));
            List_totalStudents.setModel(listModelGenEnrollment);
        }

    }//end
    //search

    private void loadSearchEnrolless(String key) {//start
        listModelGenEnrollment = new DefaultListModel();
        enrollment.enrolleesSearch(_yearInclusive, key,_semester);
        for (Object c : enrollment.getData()) {
            listModelGenEnrollment.addElement(c.toString().replace("[", "").replace("]", ""));
            List_totalStudents.setModel(listModelGenEnrollment);
        }

    }//end

    private void loadStudentPerCourse() {//start
        listModelStudPerCourse = new DefaultListModel();
        enrollment.genStudentFromCourse(_yearInclusive,_semester);
        for (Object c : enrollment.getData()) {
            listModelStudPerCourse.addElement(c.toString().replace("[", "").replace("]", ""));
            List_Course.setModel(listModelStudPerCourse);
        }

    }//end
    //search

    private void loadSearchStudentPerCourse(String key) {//start
        listModelStudPerCourse = new DefaultListModel();
        enrollment.genSearchStudentFromCourse(_yearInclusive, key,_semester);
        for (Object c : enrollment.getData()) {
            listModelStudPerCourse.addElement(c.toString().replace("[", "").replace("]", ""));
            List_Course.setModel(listModelStudPerCourse);
        }

    }//end

    private void tableListener() {

        Table_enrollment.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                int row = Table_enrollment.getSelectedRow();
                enrollmentId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 1).toString());
                lectureId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 2).toString());
                courseId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 3).toString());
                stud_id = (Table_enrollment.getModel().getValueAt(row, 4).toString());
                roomId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 18).toString());
                f_student.setText(Table_enrollment.getModel().getValueAt(row, 7).toString());
                f_lecture.setText(Table_enrollment.getModel().getValueAt(row, 9).toString());
                //Summary
                String desCription = "Description: " + Table_enrollment.getModel().getValueAt(row, 17).toString() + "\n"
                        + "Unit: " + Table_enrollment.getModel().getValueAt(row, 16).toString() + "\n"
                        + "Lecturer: " + Table_enrollment.getModel().getValueAt(row, 8).toString() + "\n"
                        + "Time Start: " + Table_enrollment.getModel().getValueAt(row, 11).toString() + "\n"
                        + "Time End: " + Table_enrollment.getModel().getValueAt(row, 12).toString() + "\n"
                        + "Date Schedule: " + Table_enrollment.getModel().getValueAt(row, 10).toString();
                f_summary.setText(desCription);
                //Summary
                f_schoolyear.setText(_yearInclusive);
                f_semester.setText(_semester);
                List_yearLevel.setSelectedItem(Table_enrollment.getModel().getValueAt(row, 13).toString());
                List_course.setSelectedItem(Table_enrollment.getModel().getValueAt(row, 6).toString());
                //Load Room
                List_room.setSelectedItem(Table_enrollment.getModel().getValueAt(row, 19).toString() + ", " + Table_enrollment.getModel().getValueAt(row, 20).toString());
                //
                editComp_ED();
            }
        });
        Table_enrollment.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP) {
                    int row = Table_enrollment.getSelectedRow();
                    enrollmentId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 1).toString());
                    lectureId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 2).toString());
                    courseId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 3).toString());
                    stud_id = (Table_enrollment.getModel().getValueAt(row, 4).toString());
                    roomId = Integer.parseInt(Table_enrollment.getModel().getValueAt(row, 18).toString());
                    f_student.setText(Table_enrollment.getModel().getValueAt(row, 7).toString());
                    f_lecture.setText(Table_enrollment.getModel().getValueAt(row, 9).toString());
                    //Summary
                    String desCription = "Description: " + Table_enrollment.getModel().getValueAt(row, 17).toString() + "\n"
                            + "Unit: " + Table_enrollment.getModel().getValueAt(row, 16).toString() + "\n"
                            + "Lecturer: " + Table_enrollment.getModel().getValueAt(row, 8).toString() + "\n"
                            + "Time Start: " + Table_enrollment.getModel().getValueAt(row, 11).toString() + "\n"
                            + "Time End: " + Table_enrollment.getModel().getValueAt(row, 12).toString() + "\n"
                            + "Date Schedule: " + Table_enrollment.getModel().getValueAt(row, 10).toString();
                    f_summary.setText(desCription);
                    //Summary
                    f_schoolyear.setText(_yearInclusive);
                    f_semester.setText(_semester);
                    List_yearLevel.setSelectedItem(Table_enrollment.getModel().getValueAt(row, 13).toString());
                    List_course.setSelectedItem(Table_enrollment.getModel().getValueAt(row, 6).toString());
                    //Load Room
                    List_room.setSelectedItem(Table_enrollment.getModel().getValueAt(row, 19).toString() + ", " + Table_enrollment.getModel().getValueAt(row, 20).toString());
                }
                editComp_ED();
            }

        });

    }

    private void clear() {
        btn_selectStudent.requestFocus();
        f_search.setText("");
        f_student.setText("");
        f_lecture.setText("");
        f_summary.setText("");
        List_yearLevel.setSelectedIndex(0);
        List_course.setSelectedIndex(0);
        List_room.setSelectedIndex(0);

        lectureId = 0;
        courseId = 0;
        stud_id = "";
        userId = 0;
    }

    ///ENABLE AND DISABLE COMPONENTS
    private void addComp_ED() {
        //
        f_student.setEnabled(true);
        f_lecture.setEnabled(true);
        btn_selectStudent.setEnabled(true);
        btn_selectLecture.setEnabled(true);
        f_summary.setEnabled(true);
        List_yearLevel.setEnabled(true);
        List_course.setEnabled(true);
        List_room.setEnabled(true);

        //
        btn_new.setEnabled(false);
        btn_save.setEnabled(true);
        btn_update.setEnabled(false);
        btn_clear.setEnabled(true);
        btn_cancel.setEnabled(true);

        btn_cor.setEnabled(false);
    }

    private void default_ED() {
        f_student.setEnabled(false);
        f_lecture.setEnabled(false);
        btn_selectStudent.setEnabled(false);
        btn_selectLecture.setEnabled(false);
        f_summary.setEnabled(false);
        List_yearLevel.setEnabled(false);
        List_course.setEnabled(false);
        List_room.setEnabled(false);
        btn_cor.setEnabled(false);
        //
        btn_new.setEnabled(true);
        btn_save.setEnabled(false);
        btn_update.setEnabled(false);
        btn_clear.setEnabled(false);
        btn_cancel.setEnabled(false);

    }

    private void editComp_ED() {
        f_student.setEnabled(true);
        f_lecture.setEnabled(true);
        btn_selectStudent.setEnabled(true);
        btn_selectLecture.setEnabled(true);
        f_summary.setEnabled(true);
        List_yearLevel.setEnabled(true);
        List_course.setEnabled(true);
        List_room.setEnabled(true);
        btn_cor.setEnabled(true);
        //
        btn_new.setEnabled(false);
        btn_save.setEnabled(false);
        btn_update.setEnabled(true);
        btn_clear.setEnabled(false);
        btn_cancel.setEnabled(true);

    }

    private void printCOR() {
        try {
            String reportDIR = System.getProperty("user.dir") + "/src/Report/cor.jrxml";
            HashMap map = new HashMap();
            map.put("inclusiveYear", _yearInclusive);
            map.put("studentNum", stud_id);
            map.put("studentFullname", f_student.getText());
            map.put("sy", "SY: " + _yearInclusive + " Semester: " + _semester);
            map.put("semester", _semester);

            ReportJDBCD rep = new ReportJDBCD(reportDIR, map);
            rep.show();

        } catch (NullPointerException e) {
        }
    }
}
